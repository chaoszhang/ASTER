# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ASTER.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import os, platform, subprocess

class FileButton(QtWidgets.QPushButton):
    def __init__(self, arg):
        super().__init__(arg)
        self.clicked.connect(self.setPath)
        self.path = ""
    
    def setPath(self):
        self.path = QtWidgets.QFileDialog.getOpenFileName(directory=os.getcwd())[0]
        self.setText(self.path)

class FolderButton(QtWidgets.QPushButton):
    def __init__(self, arg):
        super().__init__(arg)
        self.clicked.connect(self.setPath)
        self.path = os.getcwd()
    
    def setPath(self):
        self.path = QtWidgets.QFileDialog.getExistingDirectory(directory=os.getcwd())
        self.setText(self.path)

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(762, 345)
        MainWindow.setAnimated(False)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.ProgramComboBox = QtWidgets.QComboBox(self.centralwidget)
        self.ProgramComboBox.setGeometry(QtCore.QRect(150, 10, 571, 22))
        self.ProgramComboBox.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.ProgramComboBox.setObjectName("ProgramComboBox")
        self.ProgramComboBox.addItem("")
        self.ProgramComboBox.addItem("")
        self.ProgramComboBox.addItem("")
        self.ProgramComboBox.addItem("")
        self.ProgramComboBox.addItem("")
        self.ProgramComboBox.addItem("")
        self.ProgramComboBox.addItem("")
        self.OutputLineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.OutputLineEdit.setGeometry(QtCore.QRect(240, 160, 481, 20))
        self.OutputLineEdit.setObjectName("OutputLineEdit")
        self.RunPushButton = QtWidgets.QPushButton(self.centralwidget)
        self.RunPushButton.setGeometry(QtCore.QRect(10, 280, 711, 21))
        self.RunPushButton.setObjectName("RunPushButton")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 10, 131, 20))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(10, 190, 221, 20))
        self.label_2.setObjectName("label_2")
        self.ThreadComboBox = QtWidgets.QComboBox(self.centralwidget)
        self.ThreadComboBox.setGeometry(QtCore.QRect(240, 190, 481, 22))
        self.ThreadComboBox.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.ThreadComboBox.setObjectName("ThreadComboBox")
        self.ThreadComboBox.addItem("")
        self.ThreadComboBox.addItem("")
        self.ThreadComboBox.addItem("")
        self.ThreadComboBox.addItem("")
        self.ThreadComboBox.addItem("")
        self.ThreadComboBox.addItem("")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(10, 160, 221, 20))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(10, 220, 221, 20))
        self.label_4.setObjectName("label_4")
        self.RoundComboBox = QtWidgets.QComboBox(self.centralwidget)
        self.RoundComboBox.setGeometry(QtCore.QRect(240, 220, 481, 22))
        self.RoundComboBox.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.RoundComboBox.setObjectName("RoundComboBox")
        self.RoundComboBox.addItem("")
        self.RoundComboBox.addItem("")
        self.RoundComboBox.addItem("")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(10, 250, 221, 20))
        self.label_5.setObjectName("label_5")
        self.AnnotationComboBox = QtWidgets.QComboBox(self.centralwidget)
        self.AnnotationComboBox.setGeometry(QtCore.QRect(240, 250, 481, 22))
        self.AnnotationComboBox.setContextMenuPolicy(QtCore.Qt.DefaultContextMenu)
        self.AnnotationComboBox.setObjectName("AnnotationComboBox")
        self.AnnotationComboBox.addItem("")
        self.AnnotationComboBox.addItem("")
        self.AnnotationComboBox.addItem("")
        self.InputPushButton = FileButton(self.centralwidget)
        self.InputPushButton.setGeometry(QtCore.QRect(10, 40, 711, 21))
        self.InputPushButton.setObjectName("InputPushButton")
        self.MappingPushButton = FileButton(self.centralwidget)
        self.MappingPushButton.setGeometry(QtCore.QRect(10, 70, 711, 21))
        self.MappingPushButton.setObjectName("MappingPushButton")
        self.ConstraintPushButton = FileButton(self.centralwidget)
        self.ConstraintPushButton.setGeometry(QtCore.QRect(10, 100, 711, 21))
        self.ConstraintPushButton.setObjectName("ConstraintPushButton")
        self.OutputPushButton = FolderButton(self.centralwidget)
        self.OutputPushButton.setGeometry(QtCore.QRect(10, 130, 711, 21))
        self.OutputPushButton.setObjectName("OutputPushButton")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 762, 18))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setTabOrder(self.ProgramComboBox, self.InputPushButton)
        MainWindow.setTabOrder(self.InputPushButton, self.MappingPushButton)
        MainWindow.setTabOrder(self.MappingPushButton, self.ConstraintPushButton)
        MainWindow.setTabOrder(self.ConstraintPushButton, self.OutputPushButton)
        MainWindow.setTabOrder(self.OutputPushButton, self.OutputLineEdit)
        MainWindow.setTabOrder(self.OutputLineEdit, self.ThreadComboBox)
        MainWindow.setTabOrder(self.ThreadComboBox, self.RoundComboBox)
        MainWindow.setTabOrder(self.RoundComboBox, self.AnnotationComboBox)
        MainWindow.setTabOrder(self.AnnotationComboBox, self.RunPushButton)

        self.RunPushButton.clicked.connect(self.run)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "ASTRAL / ASTRAL-Pro / wASTRAL-h with GUI"))
        self.ProgramComboBox.setItemText(0, _translate("MainWindow", "ASTRAL"))
        self.ProgramComboBox.setItemText(1, _translate("MainWindow", "ASTRAL-Pro"))
        self.ProgramComboBox.setItemText(2, _translate("MainWindow", "Weighted ASTRAL - Hybrid (bootstrap-like branch supports)"))
        self.ProgramComboBox.setItemText(3, _translate("MainWindow", "Weighted ASTRAL - Hybrid (LRT/SH-like branch support)"))
        self.ProgramComboBox.setItemText(4, _translate("MainWindow", "Weighted ASTRAL - Hybrid (local-Baysian-like branch support)"))
        self.ProgramComboBox.setItemText(5, _translate("MainWindow", "Weighted ASTRAL - Hybrid (support values between 0 and 100)"))
        self.ProgramComboBox.setItemText(6, _translate("MainWindow", "Weighted ASTRAL - Hybrid (support values between 0 and 1)"))
        self.ProgramComboBox.setItemText(7, _translate("MainWindow", "Weighted ASTRAL - Hybrid (support values between 0.333 and 1)"))
        self.OutputLineEdit.setText(_translate("MainWindow", "inferred_species_tree.nw"))
        self.RunPushButton.setText(_translate("MainWindow", "Run"))
        self.label.setText(_translate("MainWindow", "Select program"))
        self.label_2.setText(_translate("MainWindow", "Number of threads"))
        self.ThreadComboBox.setItemText(0, _translate("MainWindow", "1"))
        self.ThreadComboBox.setItemText(1, _translate("MainWindow", "2"))
        self.ThreadComboBox.setItemText(2, _translate("MainWindow", "4"))
        self.ThreadComboBox.setItemText(3, _translate("MainWindow", "8"))
        self.ThreadComboBox.setItemText(4, _translate("MainWindow", "16"))
        self.ThreadComboBox.setItemText(5, _translate("MainWindow", "32"))
        self.label_3.setText(_translate("MainWindow", "Output file name"))
        self.label_4.setText(_translate("MainWindow", "Search space"))
        self.RoundComboBox.setItemText(0, _translate("MainWindow", "Default (r=4, s=4)"))
        self.RoundComboBox.setItemText(1, _translate("MainWindow", "Large (r=16, s=16)"))
        self.RoundComboBox.setItemText(2, _translate("MainWindow", "Minimum (r=1, s=0)"))
        self.label_5.setText(_translate("MainWindow", "Branch annotation"))
        self.AnnotationComboBox.setItemText(0, _translate("MainWindow", "LocalPP support"))
        self.AnnotationComboBox.setItemText(1, _translate("MainWindow", "None"))
        self.AnnotationComboBox.setItemText(2, _translate("MainWindow", "Verbose"))
        self.InputPushButton.setText(_translate("MainWindow", "Select input Newick gene file here"))
        self.MappingPushButton.setText(_translate("MainWindow", "Select gene-to-species name mapping file here (optional) "))
        self.ConstraintPushButton.setText(_translate("MainWindow", "Select species tree to be placed on / evaluated here (optional) "))
        self.OutputPushButton.setText(_translate("MainWindow", "Select output directory here (optional)"))

    def run(self):
        if self.InputPushButton.path == "":
            self.RunPushButton.setText("You need to select input file before running!")
        else:
            if self.ProgramComboBox.currentText() == "ASTRAL":
                program = "astral"
                option = ""
            elif self.ProgramComboBox.currentText() == "ASTRAL-Pro":
                program = "astral-pro"
                option = ""
            else:
                program = "astral-hybrid"
                if self.ProgramComboBox.currentText() == "Weighted ASTRAL - Hybrid (bootstrap-like branch supports)" or self.ProgramComboBox.currentText() == "Weighted ASTRAL - Hybrid (support values between 0 and 100)":
                    option = "-S"
                elif self.ProgramComboBox.currentText() == "Weighted ASTRAL - Hybrid (LRT/SH-like branch support)" or self.ProgramComboBox.currentText() == "Weighted ASTRAL - Hybrid (support values between 0 and 1)":
                    option = "-L"
                elif self.ProgramComboBox.currentText() == "Weighted ASTRAL - Hybrid (local-Baysian-like branch support)" or self.ProgramComboBox.currentText() == "Weighted ASTRAL - Hybrid (support values between 0.333 and 1)":
                    option = "-B"
            
            if platform.system() == "Windows":
                cmd = [os.path.join(os.getcwd(), program + ".exe")]
            else:
                cmd = [os.path.join(os.getcwd(), "..", "bin", program)]
            if option != "":
                cmd.append(option)
            
            cmd.append("-i")
            cmd.append(self.InputPushButton.path)
            if self.MappingPushButton.path != "":
                cmd.append("-a")
                cmd.append(self.MappingPushButton.path)
            if self.ConstraintPushButton.path != "":
                cmd.append("-c")
                cmd.append(self.ConstraintPushButton.path)
            cmd.append("-o")
            cmd.append(os.path.join(self.OutputPushButton.path, self.OutputLineEdit.text()))

            cmd.append("-t")
            cmd.append(self.ThreadComboBox.currentText())
            
            if self.RoundComboBox.currentText() == "Large (r=16, s=16)":
                cmd.append("-R")
            elif self.RoundComboBox.currentText() == "Minimum (r=1, s=0)":
                cmd.append("-C")
            
            if self.AnnotationComboBox.currentText() == "None":
                cmd.append("-u")
                cmd.append("0")
            elif self.AnnotationComboBox.currentText() == "Verbose":
                cmd.append("-u")
                cmd.append("2")
            
            print(cmd)
            subprocess.run(cmd)
            print(" *** Finished! *** ")

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
